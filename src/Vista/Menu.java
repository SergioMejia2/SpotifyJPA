/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

import Entities.Cancion;
import Entities.Discografica;
import Entities.Genero;
import Entities.InfoCancion;
import Entities.Interprete;
import Entities.Pais;
import Entities.Playlist;
import Entities.Reaccion;
import Entities.Registro;
import Entities.Usuario;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.math.BigInteger;
import java.util.HashMap;
import java.util.List;
import javax.swing.JOptionPane;
import terceraentrega.Facade;

/**
 *
 * @author sergi
 */
public class Menu extends javax.swing.JFrame
{

    private static final int MENU_ID = 2;
    private static final int ADD_ARTISTA = 3;
    private static final int BUSCAR_CAN = 5;
    private static final int LOGIN = 0;
    private static final int ADD_ALBUM = 4;
    private static final int ADD_PLAY = 6;
    private static final int MODIFY_PLAY = 7;
    private static final int PLAY = 8;
    
    private Facade controlador;
    
    private PanelAgregarArtista panelAgregarArtista;
    private PanelMenuPrincipal panelMenuPrincipal;
    private PanelAgregarAlbum panelAgregarAlbum;
    private PanelLogin panelLogin;
    private PanelSuscribirse panelSuscribirse;
    private PanelResultadosBusqueda panelResultadosBusqueda;
    private PanelAgregarAPlaylist panelAgregarAPlaylist;
    private PanelModificarPlaylist panelModificarPlaylist;
    private PanelReproducir panelReproducir;
    /**
     * Creates new form Menu
     */
    public Menu(List<Pais> paises, List<Discografica> discograficas, List<Interprete> interpretes, List<Genero> generos, Facade controlador )
    {
        initComponents();
        this.controlador = controlador;
        panelAgregarArtista = new PanelAgregarArtista(paises, this);
        panelMenuPrincipal = new PanelMenuPrincipal(this);
        panelAgregarAlbum = new PanelAgregarAlbum(this,discograficas, interpretes, generos);
        panelLogin = new PanelLogin(this);
        panelSuscribirse = new PanelSuscribirse(this, paises);
        panelResultadosBusqueda = new PanelResultadosBusqueda(this);
        panelAgregarAPlaylist = new PanelAgregarAPlaylist(this); 
        panelModificarPlaylist = new PanelModificarPlaylist(this);
        panelReproducir = new PanelReproducir(this);
        
        jTabbedPane1.add("Login", panelLogin);
        jTabbedPane1.add("Suscribirse", panelSuscribirse);
        jTabbedPane1.add("Menú Principal", panelMenuPrincipal);
        jTabbedPane1.add("Agregar Artista", panelAgregarArtista);
        jTabbedPane1.add("Agregar Album", panelAgregarAlbum);
        jTabbedPane1.add("Buscar Cancion", panelResultadosBusqueda);
        jTabbedPane1.add("Agregar a Playlist", panelAgregarAPlaylist);
        jTabbedPane1.add("Modificar Playlist", panelModificarPlaylist);
        jTabbedPane1.add("Reproducir", panelReproducir);
        
        for(int i = 1; i < jTabbedPane1.getTabCount(); i++)
        {
            jTabbedPane1.setEnabledAt(i, false);
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jTabbedPane1 = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                jTabbedPane1StateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 786, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 620, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_jTabbedPane1StateChanged
    {//GEN-HEADEREND:event_jTabbedPane1StateChanged
        if( jTabbedPane1.getSelectedIndex() == ADD_ALBUM)
        {
            List<Interprete> interpretes = controlador.getInterpretes();
            panelAgregarAlbum.actualizar( interpretes );
        }
    }//GEN-LAST:event_jTabbedPane1StateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

    void agregarArtista(String nombre_real, String nombre_artista, Pais pais)
    {
         controlador.AgregarArtista(nombre_real, nombre_artista, pais);
    }

    public void cambiarPanel(String comando)
    {
        if(comando.equals("Agregar Artista"))
            jTabbedPane1.setSelectedIndex(ADD_ARTISTA);
        if(comando.equals("Buscar Cancion"))
            jTabbedPane1.setSelectedIndex(BUSCAR_CAN);
        if(comando.equals("Login"))
            jTabbedPane1.setSelectedIndex(LOGIN);
        if(comando.equals("Agregar a Playlist"))
            jTabbedPane1.setSelectedIndex(ADD_PLAY);
        if(comando.equals("Agregar´Álbum"))
            jTabbedPane1.setSelectedIndex(ADD_ALBUM);
        if(comando.equals("Menu Principal"))
            jTabbedPane1.setSelectedIndex(MENU_ID);
        if(comando.equals("Modificar Playlist"))
            jTabbedPane1.setSelectedIndex(MODIFY_PLAY);
        if(comando.equals("Reproducir"))
            jTabbedPane1.setSelectedIndex(PLAY);
            
    }

    public boolean AgregarAlbum(String nAlbum, String fecha, Discografica discografica, String tipo)
    {
        return ( controlador.AgregarAlbum(nAlbum,fecha,discografica,tipo) );   
    }

    void Login(String username, String password)
    {
        if(username.equalsIgnoreCase("admin") && password.equals("admin"))
        {
            jTabbedPane1.setEnabledAt(0, false);
            jTabbedPane1.setEnabledAt(MENU_ID, true);
            jTabbedPane1.setEnabledAt(ADD_ALBUM, true);
            jTabbedPane1.setEnabledAt(ADD_ARTISTA, true);
            panelMenuPrincipal.Login(username,password);
            jTabbedPane1.setSelectedIndex(MENU_ID);
            controlador.Login("admin", "admin");
            
        }
        else
        {
            boolean init = controlador.Login(username, password);
            if( init == true)
            {
                jTabbedPane1.setEnabledAt(0, false);
                jTabbedPane1.setEnabledAt(MENU_ID, true);
                panelMenuPrincipal.Login(username,password);
                jTabbedPane1.setSelectedIndex(MENU_ID);
                
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Usuario y/o contraseña incorrectos", "Error al iniciar al iniciar sesión", JOptionPane.ERROR_MESSAGE);        
            }
        }
        
    }

    void Suscribirse()
    {
        jTabbedPane1.setSelectedIndex(1);
    }

    void Suscribirse(String nombre, String apellido, String nickname, String password, Pais pais, String tipoSub, String numTarjeta)
    {
        if(!tipoSub.equalsIgnoreCase("Gratuita")&& numTarjeta.equals(""))   
        {
            JOptionPane.showMessageDialog(null, "Ingrese numero de tarjeta", "Error al suscribirse", JOptionPane.ERROR_MESSAGE);        
        }
        else
        {
            controlador.Suscribirse( nombre, apellido, nickname, password, pais, tipoSub, numTarjeta);
            cambiarPanel("Login");
        }
    }

    void AgregarCancion(String titulo, Genero genero, Interprete interprete, List<BigInteger> idsArtistas, int min, int sec)
    {
        controlador.AgregarCancion(titulo,genero,interprete,idsArtistas, min, sec);
    }

    void BuscarCancion(String busqueda)
    {
        List<InfoCancion> list_info = controlador.BuscarCancion( busqueda );
        panelResultadosBusqueda.actualizarDatos( list_info );
        cambiarPanel("Buscar Cancion");
    }

    void agregarAPlaylist(Playlist playlist)
    {
        List<BigInteger> canciones = panelResultadosBusqueda.GetCanciones();
        controlador.AgregarAPlaylist(canciones, playlist);
    }

    public void actualizarPlaylists(List<Playlist> playlists)
    {
        panelAgregarAPlaylist.actualizarPlaylists( playlists );
        panelMenuPrincipal.desplegarDatos(playlists);
        
    }

    void actualizarArtistas()
    {
        jTabbedPane1StateChanged(null);
    }

    Playlist AgregarPlaylist(String newPlaylist, String privacidad)
    {
        List<BigInteger> canciones = panelResultadosBusqueda.GetCanciones();
        Playlist playlist = controlador.AgregarPlaylist( newPlaylist, canciones, privacidad );
        return playlist;
    }

    void Logout()
    {
       boolean activo;
       activo = controlador.Logout();
       if(activo)
       {
          for (int i=1 ; i<jTabbedPane1.getTabCount(); i++)
              jTabbedPane1.setEnabledAt(i, false);
          jTabbedPane1.setEnabledAt(0, true);
          
          JOptionPane.showMessageDialog(null, "Sesion cerrada correctamente");
           cambiarPanel("Login");         
       }
       else
       {
           JOptionPane.showMessageDialog(null, "No hay sesion activa", "Error al hacer logout", JOptionPane.ERROR_MESSAGE);
       }
    }

    void actualizarPlaylistSeleccionada(Playlist playlist)
    {
        List<Cancion> canciones = controlador.getCanciones( playlist );
        List<BigInteger> ordenes = controlador.getOrdenes( playlist );
        panelModificarPlaylist.actualizar( playlist, canciones, ordenes );
    }

    void modificarPlaylist(HashMap<BigInteger, Cancion> mapa, String nombreP)
    {
        controlador.modificarPlaylist(mapa, nombreP, panelMenuPrincipal.getPlaylistSeleccionada());
    }

    void reproducir(BigInteger id_cancion)
    {
        InfoCancion IC = controlador.BuscarCancion(id_cancion);
        Reaccion r = controlador.obtenerReaccion(id_cancion);
        panelReproducir.actualizar(IC, r);
        jTabbedPane1.setEnabledAt(MENU_ID, false);
        cambiarPanel("Reproducir");
    }

    public void darReaccion(BigInteger codigo, boolean b)
    {
        controlador.darReaccion(codigo, b);
    }

    public Usuario getUsuarioActivo()
    {
        return controlador.getUsuario_Activo();
    }

    void registrarReproduccion(Registro registro)
    {
        jTabbedPane1.setEnabledAt(MENU_ID, true);
        cambiarPanel("Menu Principal");
        controlador.registrarReproduccion( registro );
    }


}
